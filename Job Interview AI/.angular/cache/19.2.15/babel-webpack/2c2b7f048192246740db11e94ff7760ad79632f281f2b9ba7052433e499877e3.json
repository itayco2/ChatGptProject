{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/itay7/Desktop/Job Interview AI/Job Interview AI/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let GptService = /*#__PURE__*/(() => {\n  class GptService {\n    http;\n    constructor(http) {\n      this.http = http;\n    }\n    getCompletion(prompt) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const body = {\n          model: \"gpt-4o-mini\",\n          messages: [{\n            role: \"system\",\n            content: prompt.system\n          }, {\n            role: \"user\",\n            content: prompt.user\n          }]\n        };\n        const headers = new HttpHeaders().set(\"authorization\", \"Bearer \" + environment.apiKey);\n        const response$ = _this.http.post(environment.gptUrl, body, {\n          headers\n        });\n        const response = yield firstValueFrom(response$);\n        const completion = response.choices[0].message.content;\n        return completion;\n      })();\n    }\n    static ɵfac = function GptService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || GptService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GptService,\n      factory: GptService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return GptService;\n})();","map":{"version":3,"names":["HttpHeaders","environment","firstValueFrom","GptService","http","constructor","getCompletion","prompt","_this","_asyncToGenerator","body","model","messages","role","content","system","user","headers","set","apiKey","response$","post","gptUrl","response","completion","choices","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\itay7\\Desktop\\Job Interview AI\\Job Interview AI\\src\\app\\services\\gpt.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { PromptModel } from '../models/prompt.model';\nimport { environment } from '../../environments/environment';\nimport { firstValueFrom } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class GptService {\n\n    constructor(private http: HttpClient) { }\n\n    public async getCompletion(prompt: PromptModel): Promise<string> {\n\n        const body = {\n            model: \"gpt-4o-mini\",\n            messages: [\n                { role: \"system\", content: prompt.system },\n                { role: \"user\", content: prompt.user },\n            ]\n        };\n\n        const headers = new HttpHeaders().set(\"authorization\", \"Bearer \" + environment.apiKey);\n\n        const response$ = this.http.post<any>(environment.gptUrl, body, { headers });\n\n        const response = await firstValueFrom(response$);\n\n        const completion = response.choices[0].message.content;\n\n        return completion;\n    }\n}\n"],"mappings":";AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,WAAW,QAAQ,gCAAgC;AAC5D,SAASC,cAAc,QAAQ,MAAM;;;AAKrC,WAAaC,UAAU;EAAjB,MAAOA,UAAU;IAECC,IAAA;IAApBC,YAAoBD,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;IAAgB;IAE3BE,aAAaA,CAACC,MAAmB;MAAA,IAAAC,KAAA;MAAA,OAAAC,iBAAA;QAE1C,MAAMC,IAAI,GAAG;UACTC,KAAK,EAAE,aAAa;UACpBC,QAAQ,EAAE,CACN;YAAEC,IAAI,EAAE,QAAQ;YAAEC,OAAO,EAAEP,MAAM,CAACQ;UAAM,CAAE,EAC1C;YAAEF,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAEP,MAAM,CAACS;UAAI,CAAE;SAE7C;QAED,MAAMC,OAAO,GAAG,IAAIjB,WAAW,EAAE,CAACkB,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGjB,WAAW,CAACkB,MAAM,CAAC;QAEtF,MAAMC,SAAS,GAAGZ,KAAI,CAACJ,IAAI,CAACiB,IAAI,CAAMpB,WAAW,CAACqB,MAAM,EAAEZ,IAAI,EAAE;UAAEO;QAAO,CAAE,CAAC;QAE5E,MAAMM,QAAQ,SAASrB,cAAc,CAACkB,SAAS,CAAC;QAEhD,MAAMI,UAAU,GAAGD,QAAQ,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACZ,OAAO;QAEtD,OAAOU,UAAU;MAAC;IACtB;;uCAvBSrB,UAAU,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;;aAAV3B,UAAU;MAAA4B,OAAA,EAAV5B,UAAU,CAAA6B,IAAA;MAAAC,UAAA,EAFP;IAAM;;SAET9B,UAAU;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}