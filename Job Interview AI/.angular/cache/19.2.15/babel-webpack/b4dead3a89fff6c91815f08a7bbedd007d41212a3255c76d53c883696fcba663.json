{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let PromptEngineeringService = /*#__PURE__*/(() => {\n  class PromptEngineeringService {\n    createPrompt(details) {\n      const system = `You are an expert in ${details.subject} programming technology.\n        Your role is to generate ${details.subject} job interview questions and answers.`;\n      const user = `Please write ${details.count} job interview questions and answers \n        in the subject of ${details.subject} at a ${details.level} level.\n        the questions and the answers should be in the following JSON format: \n        [\n            { \"question\": \"First Question...\", \"answer\": \"First Answer...\" },\n            { \"question\": \"Second Question...\", \"answer\": \"Second Answer...\" },\n            { \"question\": \"Third Question...\", \"answer\": \"Third Answer...\" },\n             ...\n        ]\n        Don't respond with anything else, just the above JSON format containing the questions and the answers.\n        `;\n      return {\n        system: this.innerTrim(system),\n        user: this.innerTrim(user)\n      };\n    }\n    innerTrim(text) {\n      // If no Enters and additional spaces:\n      if (!text.includes(\"\\n\") && !text.includes(\"  \")) return text;\n      // Remove Enter: \n      text = text.replaceAll(\"\\n\", \" \");\n      // Remove multi-space: \n      text = text.replaceAll(\"  \", \" \");\n      // Recursion: \n      return this.innerTrim(text);\n    }\n    static ɵfac = function PromptEngineeringService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PromptEngineeringService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PromptEngineeringService,\n      factory: PromptEngineeringService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return PromptEngineeringService;\n})();","map":{"version":3,"names":["PromptEngineeringService","createPrompt","details","system","subject","user","count","level","innerTrim","text","includes","replaceAll","factory","ɵfac","providedIn"],"sources":["C:\\Users\\itay7\\Desktop\\Job Interview AI\\Job Interview AI\\src\\app\\services\\prompt-engineering.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DetailsModel } from '../models/details.model';\nimport { PromptModel } from '../models/prompt.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PromptEngineeringService {\n\n    public createPrompt(details: DetailsModel): PromptModel {\n\n        const system = `You are an expert in ${details.subject} programming technology.\n        Your role is to generate ${details.subject} job interview questions and answers.`;\n\n        const user = `Please write ${details.count} job interview questions and answers \n        in the subject of ${details.subject} at a ${details.level} level.\n        the questions and the answers should be in the following JSON format: \n        [\n            { \"question\": \"First Question...\", \"answer\": \"First Answer...\" },\n            { \"question\": \"Second Question...\", \"answer\": \"Second Answer...\" },\n            { \"question\": \"Third Question...\", \"answer\": \"Third Answer...\" },\n             ...\n        ]\n        Don't respond with anything else, just the above JSON format containing the questions and the answers.\n        `;\n\n        return { system: this.innerTrim(system), user: this.innerTrim(user) };\n    }\n\n    private innerTrim(text: string): string {\n\n        // If no Enters and additional spaces:\n        if (!text.includes(\"\\n\") && !text.includes(\"  \")) return text;\n\n        // Remove Enter: \n        text = text.replaceAll(\"\\n\", \" \");\n\n        // Remove multi-space: \n        text = text.replaceAll(\"  \", \" \");\n\n        // Recursion: \n        return this.innerTrim(text);\n    }\n\n}\n"],"mappings":";AAOA,WAAaA,wBAAwB;EAA/B,MAAOA,wBAAwB;IAE1BC,YAAYA,CAACC,OAAqB;MAErC,MAAMC,MAAM,GAAG,wBAAwBD,OAAO,CAACE,OAAO;mCAC3BF,OAAO,CAACE,OAAO,uCAAuC;MAEjF,MAAMC,IAAI,GAAG,gBAAgBH,OAAO,CAACI,KAAK;4BACtBJ,OAAO,CAACE,OAAO,SAASF,OAAO,CAACK,KAAK;;;;;;;;;SASxD;MAED,OAAO;QAAEJ,MAAM,EAAE,IAAI,CAACK,SAAS,CAACL,MAAM,CAAC;QAAEE,IAAI,EAAE,IAAI,CAACG,SAAS,CAACH,IAAI;MAAC,CAAE;IACzE;IAEQG,SAASA,CAACC,IAAY;MAE1B;MACA,IAAI,CAACA,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAACD,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE,OAAOD,IAAI;MAE7D;MACAA,IAAI,GAAGA,IAAI,CAACE,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC;MAEjC;MACAF,IAAI,GAAGA,IAAI,CAACE,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC;MAEjC;MACA,OAAO,IAAI,CAACH,SAAS,CAACC,IAAI,CAAC;IAC/B;;uCAnCST,wBAAwB;IAAA;;aAAxBA,wBAAwB;MAAAY,OAAA,EAAxBZ,wBAAwB,CAAAa,IAAA;MAAAC,UAAA,EAFrB;IAAM;;SAETd,wBAAwB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}