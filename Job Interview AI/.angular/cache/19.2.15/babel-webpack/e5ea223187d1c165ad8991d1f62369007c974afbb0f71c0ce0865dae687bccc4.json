{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nlet UniqueSelectionDispatcher = /*#__PURE__*/(() => {\n  class UniqueSelectionDispatcher {\n    _listeners = [];\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n      for (let listener of this._listeners) {\n        listener(id, name);\n      }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n      this._listeners.push(listener);\n      return () => {\n        this._listeners = this._listeners.filter(registered => {\n          return listener !== registered;\n        });\n      };\n    }\n    ngOnDestroy() {\n      this._listeners = [];\n    }\n    static ɵfac = function UniqueSelectionDispatcher_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UniqueSelectionDispatcher)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: UniqueSelectionDispatcher,\n      factory: UniqueSelectionDispatcher.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UniqueSelectionDispatcher;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { UniqueSelectionDispatcher as U };","map":{"version":3,"names":["i0","Injectable","UniqueSelectionDispatcher","_listeners","notify","id","name","listener","listen","push","filter","registered","ngOnDestroy","ɵfac","UniqueSelectionDispatcher_Factory","__ngFactoryType__","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","U"],"sources":["C:/Users/itay7/Desktop/Job Interview AI/Job Interview AI/node_modules/@angular/cdk/fesm2022/unique-selection-dispatcher-DtHZDqyJ.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    _listeners = [];\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return () => {\n            this._listeners = this._listeners.filter((registered) => {\n                return listener !== registered;\n            });\n        };\n    }\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: UniqueSelectionDispatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: UniqueSelectionDispatcher, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.6\", ngImport: i0, type: UniqueSelectionDispatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nexport { UniqueSelectionDispatcher as U };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,QAAQ,eAAe;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,IASMC,yBAAyB;EAA/B,MAAMA,yBAAyB,CAAC;IAC5BC,UAAU,GAAG,EAAE;IACf;AACJ;AACA;AACA;AACA;IACIC,MAAMA,CAACC,EAAE,EAAEC,IAAI,EAAE;MACb,KAAK,IAAIC,QAAQ,IAAI,IAAI,CAACJ,UAAU,EAAE;QAClCI,QAAQ,CAACF,EAAE,EAAEC,IAAI,CAAC;MACtB;IACJ;IACA;AACJ;AACA;AACA;IACIE,MAAMA,CAACD,QAAQ,EAAE;MACb,IAAI,CAACJ,UAAU,CAACM,IAAI,CAACF,QAAQ,CAAC;MAC9B,OAAO,MAAM;QACT,IAAI,CAACJ,UAAU,GAAG,IAAI,CAACA,UAAU,CAACO,MAAM,CAAEC,UAAU,IAAK;UACrD,OAAOJ,QAAQ,KAAKI,UAAU;QAClC,CAAC,CAAC;MACN,CAAC;IACL;IACAC,WAAWA,CAAA,EAAG;MACV,IAAI,CAACT,UAAU,GAAG,EAAE;IACxB;IACA,OAAOU,IAAI,YAAAC,kCAAAC,iBAAA;MAAA,YAAAA,iBAAA,IAAwFb,yBAAyB;IAAA;IAC5H,OAAOc,KAAK,kBAD6EhB,EAAE,CAAAiB,kBAAA;MAAAC,KAAA,EACYhB,yBAAyB;MAAAiB,OAAA,EAAzBjB,yBAAyB,CAAAW,IAAA;MAAAO,UAAA,EAAc;IAAM;EACxJ;EAAC,OA7BKlB,yBAAyB;AAAA;AA8B/B;EAAA,QAAAmB,SAAA,oBAAAA,SAAA;AAAA;AAKA,SAASnB,yBAAyB,IAAIoB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}